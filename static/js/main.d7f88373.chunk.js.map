{"version":3,"sources":["Components/Login/AuthenticationService.js","Components/Login/Login.js","Components/Todo/TodoApp.js","Components/WelcomePage/WelcomePage.js","Components/Header/Header.js","Components/Footer/Footer.js","Components/Logout/Logout.js","Components/Login/AuthenticatedRouter.js","Components/Todo/TodoComponent.js","App.js","serviceWorker.js","index.js"],"names":["username","password","sessionStorage","setItem","this","setInterceptors","removeItem","getItem","userName","basicAuth","window","btoa","uname","Axios","interceptors","request","use","config","isUserLoggedIn","headers","authorization","Login","state","loginSuccess","showError","handlerUsername","event","setState","target","value","handlerPassword","handlerLogin","AuthenticationService","registerSucessfulLogin","props","history","push","className","type","placeholder","onChange","required","onClick","style","marginTop","borderRadius","Component","TodoApp","todo","message","deleteTodoClicked","id","name","getUserName","delete","then","res","componentDidMount","updateTodoClicked","addTodoClick","get","data","row","map","obj","key","description","done","moment","targetDate","format","color","border","overflowY","height","Table","striped","bordered","hover","variant","width","marginLeft","WelcomePage","match","params","to","textDecoration","Header","Navbar","bg","expand","boxShadow","Brand","Toggle","aria-controls","Collapse","Nav","Link","logout","withRouter","Footer","Logout","AuthenticatedRouter","TodoComponent","checked","handleChange","onSubmit","values","put","post","console","log","initialValues","enableReinitialize","margin","uncheckedIcon","onColor","App","minHeight","backgroundColor","path","exact","component","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.d7f88373.chunk.js","sourcesContent":["import Axios from \"axios\";\n\nclass AuthenticationService {\n\n    registerSucessfulLogin(username, password) {\n        sessionStorage.setItem('authenticatedUser', username);\n\n        this.setInterceptors()  \n\n    }\n\n    logout() {\n\n        sessionStorage.removeItem('authenticatedUser');\n    }\n\n    isUserLoggedIn() {\n        let item = sessionStorage.getItem('authenticatedUser');\n        if (item === null) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n\n    getUserName() {\n        let userName = sessionStorage.getItem('authenticatedUser')\n\n        if (userName === null) return ''\n        return userName\n    }\n\n    setInterceptors() {\n        let uname = 'darshan'\n        let pass = '2darshan'\n\n        let basicAuth = 'Basic ' + window.btoa(uname + \":\" + pass);\n        Axios.interceptors.request.use((config) => {\n            if (this.isUserLoggedIn()) {\n                config.headers.authorization = basicAuth\n\n            }\n\n            return config\n\n\n        })\n    }\n}\n\nexport default new AuthenticationService();","\nimport React, { Component } from 'react';\nimport AuthenticationService from './AuthenticationService';\nimport './Login.css';\n\n\n\nclass Login extends Component {\n\n\n    state = {\n\n        username: 'Darshan',\n        password: '',\n        loginSuccess: null,\n        showError: null\n\n    }\n\n    handlerUsername = (event) => {\n\n        this.setState({\n            username: event.target.value\n\n        })\n\n    }\n\n    handlerPassword = (event) => {\n\n        this.setState({\n            password: event.target.value\n\n        })\n\n    }\n\n    handlerLogin = () => {\n\n        if ((this.state.username === 'Darshan') && (this.state.password === '2darshan')) {\n\n            AuthenticationService.registerSucessfulLogin(this.state.username, this.state.password);\n\n            this.props.history.push(`/welcome/${this.state.username}`)\n            this.setState({ loginSuccess: true })\n            this.setState({ showError: false })\n        }\n        else {\n\n            this.setState({ loginSuccess: false })\n            this.setState({ showError: true })\n\n\n\n        }\n    }\n\n\n\n    render() {\n\n        //const check=this.state.loginSuccess===true?<div>logged</div>:<div>nope</div>\n\n\n\n\n        return (\n\n            \n            <div className=\"parent\"  >\n\n               \n                <div className=\"container\" >\n                    <label ><b>Username</b></label>\n                    <input type=\"text\"\n                     className=\"text_123\"\n                        placeholder=\"Enter Username\"\n\n                        value={this.state.username}\n                        onChange={this.handlerUsername}\n                        required \n                       />\n\n                    <label ><b>Password</b></label>\n                    <input type=\"password\"\n                     className=\"pass_123\"\n                        placeholder=\"Enter Password\"\n\n                        value={this.state.password}\n                        onChange={this.handlerPassword}\n                       \n                        required />\n\n                    <button onClick={this.handlerLogin} style={{marginTop:\"50px\",borderRadius:\"100px\"}}>Login</button>\n\n                    {this.state.showError && <div className=\"alert alert-danger text-center\" style={{marginTop:\"5px\"}}>Invalid username or password </div>}\n\n\n                </div>\n\n               \n\n                \n            </div>\n\n\n        );\n    }\n}\n\n\nexport default Login;","\nimport Axios from 'axios';\nimport React, { Component } from 'react';\nimport { Table } from 'react-bootstrap';\nimport AuthenticationService from '../Login/AuthenticationService';\nimport moment from 'moment';\n\nclass TodoApp extends Component {\n\n    state = {\n        todo: [],\n        message: null\n    }\n\n\n    componentDidMount() {\n\n\n        let name= AuthenticationService.getUserName()\n        Axios.get(`http://localhost:8080/api/users/${name}/todos`).then(res => {\n\n\n\n\n            this.setState({ todo: res.data });\n\n        })\n    }\n\n\n    deleteTodoClicked=(id)=>{\n\n        let name= AuthenticationService.getUserName()\n\n        Axios.delete(`http://localhost:8080/api/users/${name}/todos/${id}`).then(res=>{\n\n\n        this.setState({message:`Delete of todo ${id} Successful`})\n        this.componentDidMount()    \n        });\n\n\n    }\n\n\n    updateTodoClicked=(id)=>{\n\n        this.props.history.push(`/todos/${id}`)\n\n\n    }\n\n    addTodoClick=()=>{\n\n        this.props.history.push(\"/todos/-1\");\n    }\n\n\n\n\n    render() {\n\n      \n\n\n\n        const row = this.state.todo.map(obj => {\n\n\n\n            return (<tr key={obj.id}>\n\n                <td>{obj.todo.description}</td>\n                <td>{obj.todo.done?\"Yes\":\"No\"}</td>\n                <td>{moment(obj.todo.targetDate).format('YYYY-MM-DD')}</td>\n                <td><button className=\"btn btn-danger\"  style={{color:\"#303030\",border:\"none\"}} onClick={()=>this.deleteTodoClicked(obj.id)}>✗</button></td>\n                <td><button className=\"btn btn-warning\" style={{color:\"#303030\",border:\"none\"}} onClick={()=>this.updateTodoClicked(obj.id)}>✔</button></td>\n            </tr>);\n\n        })\n\n\n\n\n        return (\n\n            <div style={{marginTop:\"30px\"}}>\n                <div className=\"d-flex justify-content-center\"> <h3 style={{color:\"#0074B1\"}}>LIST OF TODOS</h3>  </div>\n        { this.state.message &&  <div className=\"alert alert-dark text-center\">{this.state.message}</div> }\n                <div className=\"container\" style={{overflowY:\"scroll\",height:\"300px\"}}>\n\n                    <Table striped bordered hover variant=\"dark\">\n                        <thead>\n\n                            <tr>\n\n                                <th>DESCRIPTION</th>\n                                <th>DONE</th>\n                                <th>DATE</th>\n                                <th>DELETE</th>\n                                <th>UPDATE</th>\n                            </tr>\n                        </thead>\n                        \n                        <tbody>\n                        {row}\n                        </tbody>\n                    </Table>\n\n                    \n\n                </div>\n\n                <button  onClick={this.addTodoClick} style={{width:\"20%\",marginLeft:\"390px\",marginTop:\"50px\"}}>Add</button>\n\n            </div >\n        );\n    }\n}\n\nexport default TodoApp;","\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\n\nclass WelcomePage extends Component {\n\n    render(){\n\n\n        return(\n\n\n        <div className=\"d-flex justify-content-center\" style={{marginTop:\"200px\"}}>\n            \n            \n            \n            <h3 style={{color:\"#0074B1\"}}>Hello {this.props.match.params.name}! Manage your todos <Link to=\"/todos\" style={{textDecoration:\"underline\"}}>here</Link> </h3></div>\n        );\n    }\n\n}\n\nexport default WelcomePage;","import React, { Component } from 'react';\nimport { Nav, Navbar } from 'react-bootstrap';\nimport { Link, withRouter } from 'react-router-dom';\nimport AuthenticationService from '../Login/AuthenticationService';\n\n\nclass Header extends Component {\n\n    render() {\n\n        const isUserLoggedIn = AuthenticationService.isUserLoggedIn();\n\n\n\n        return (\n\n            <Navbar bg=\"dark\" expand=\"lg\" style={{boxShadow:\"0 4px 50px 0 rgba(0,0,0,0.4)\"}}>\n                <Navbar.Brand ><Link to=\"/welcome/darshan\">Todo App</Link></Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                        {isUserLoggedIn && <Nav.Link ><Link to=\"/welcome/darshan\">Home</Link></Nav.Link>}\n                        {isUserLoggedIn && < Nav.Link > <Link to=\"/todos\">Todos</Link></Nav.Link>}\n                        {!isUserLoggedIn && <Nav.Link ><Link to=\"/login\">Login</Link></Nav.Link>}\n\n                        {isUserLoggedIn && < Nav.Link > <Link to=\"/logout\" onClick={AuthenticationService.logout}>Logout</Link></Nav.Link>}\n\n\n                    </Nav>\n\n                </Navbar.Collapse >\n            </Navbar >\n        );\n    }\n\n}\n\nexport default withRouter(Header);\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport \"./Footer.css\";\n\nclass Footer extends Component {\n\n    render() {\n\n\n        return (\n\n\n            <div>\n\n                <footer className=\"footerr\">\n\n\n                    <div className=\"footer-copyright text-center py-3\" style={{color:\"#1376ff\"}}>© 2020 Copyright:\n                             <Link to=\"/welcome/darshan\">TodoList.com</Link>\n                    </div>\n\n                </footer>\n\n\n            </div>\n        );\n    }\n\n}\n\nexport default Footer;","import React, { Component } from 'react';\n\n\n\nclass Logout extends Component {\n\n    render() {\n\n\n        return (\n\n            <>\n\n                <h1>Logged out</h1>\n                <div className=\"container\">\n\n                    Thank you for using my application\n            </div>\n            </>\n        );\n    }\n\n}\n\nexport default Logout;","import React from 'react';\nimport { Redirect, Route } from 'react-router-dom';\nimport AuthenticationService from './AuthenticationService';\n\nconst AuthenticatedRouter = (props) => {\n\n    if (AuthenticationService.isUserLoggedIn()) {\n        return <Route {...props} />\n    }\n\n    else {\n        return <Redirect to=\"/login\"/>\n    }\n\n\n\n\n}\n\nexport default AuthenticatedRouter;","import moment from 'moment';\nimport React, { Component } from 'react'\n\nimport { Formik, Form, Field } from 'formik';\nimport Axios from 'axios';\nimport AuthenticationService from '../Login/AuthenticationService';\nimport Switch from \"react-switch\";\n\n\nclass TodoComponent extends Component {\n\n\n    state = {\n\n        id: this.props.match.params.id,\n        description: '',\n        targetDate: '',\n        checked: false\n    }\n\n    componentDidMount() {\n\n\n\n        if (this.state.id === \"-1\") {\n            console.log(\"the id is\" + this.state.id)\n            return\n        }\n\n\n\n\n\n\n        let name = AuthenticationService.getUserName()\n        let id = this.state.id;\n\n        Axios.get(`http://localhost:8080/api/users/${name}/todos/${id}`).then(res => {\n\n            //console.log(res.data.todo.description);\n\n            this.setState({\n\n                description: res.data.todo.description,\n                targetDate: moment(res.data.todo.targetDate).format('YYYY-MM-DD'),\n                checked: res.data.todo.done\n            })\n\n\n\n        })\n\n\n    }\n\n    handleChange = (checked) => {\n\n\n        this.setState({ checked });\n\n\n    }\n\n    onSubmit = (values) => {\n\n        if (this.state.id !== -1) {\n\n            let data = {\n\n                id: this.state.id,\n\n                todo: {\n\n                    description: values.description,\n                    done: values.checked,\n                    targetDate: values.targetDate\n                }\n            }\n\n\n\n            Axios.put(`http://localhost:8080/api/users/${AuthenticationService.getUserName()}/todos/${this.state.id}`, data).then(() => {\n\n                this.props.history.push('/todos');\n\n            });\n\n        }\n\n        else {\n\n            let data = {\n\n                todo: {\n\n                    description: values.description,\n                    done: values.checked,\n                    targetDate: values.targetDate\n                }\n            }\n\n\n\n            Axios.post(`http://localhost:8080/api/users/${AuthenticationService.getUserName()}/todos`, data).then(() => {\n\n                this.props.history.push('/todos');\n\n            });\n\n        }\n\n\n\n\n    }\n\n    render() {\n\n\n\n        let description = this.state.description\n\n        let targetDate = this.state.targetDate\n\n        let checked = this.state.checked\n\n\n\n\n        return (\n\n            <>\n\n                \n\n                <div className=\"parent\">\n\n                    <div className=\"container\">\n\n                        <Formik initialValues={{\n                            description, targetDate, checked\n                        }}\n                            enableReinitialize={true}\n                            onSubmit={this.onSubmit}>\n\n                            {\n\n                                (props) => (\n                                    <Form>\n\n\n                                        <fieldset className=\"form-group\">\n\n                                            <label >Description</label>\n                                            <Field className=\"text_123\" type=\"text\" name=\"description\" /> \n                                        </fieldset>\n\n                                        <fieldset className=\"form-group\">\n\n                                            <label>Have You Completed ?</label>\n                                            <div style={{ margin: \"auto\" }}><Switch onChange={this.handleChange} checked={this.state.checked} uncheckedIcon={false} onColor=\"#0074b1\" /> </div>\n                                        </fieldset>\n\n                                        <fieldset className=\"form-group\">\n\n                                            <label>Target Date</label>\n                                            <Field className=\"text_123\" type=\"date\" name=\"targetDate\" />\n                                        </fieldset>\n                                        <button type=\"submit\">Save</button>\n                                    </Form>\n\n\n\n\n\n                                )\n                            }\n                        </Formik>\n\n\n                    </div>\n\n                </div>\n            </>\n        );\n    }\n}\n\nexport default TodoComponent;","import React, { Component } from 'react';\n\n\nimport Login from './Components/Login/Login';\nimport './Components/Todo/TodoApp'\n\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport WelcomePage from './Components/WelcomePage/WelcomePage';\n\nimport TodoApp from './Components/Todo/TodoApp';\nimport Header from './Components/Header/Header';\nimport Footer from './Components/Footer/Footer';\n\n\n\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Logout from './Components/Logout/Logout';\nimport AuthenticatedRouter from './Components/Login/AuthenticatedRouter';\nimport TodoComponent from './Components/Todo/TodoComponent';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div style={{height:\"100vh\",minHeight:\"100vh\", backgroundColor:\"#343a40\"}}>\n\n        <Router>\n          <>\n            <Header/>\n            <Switch>\n              <Route path=\"/\" exact component={Login} />\n              <Route path=\"/login\" component={Login} />\n              <AuthenticatedRouter path=\"/welcome/:name\" component={WelcomePage} />\n\n              <AuthenticatedRouter path=\"/todos/:id\" component={TodoComponent} />\n              <AuthenticatedRouter path=\"/todos\" component={TodoApp} />\n              <AuthenticatedRouter path=\"/logout\" component={Logout} />\n\n            </Switch>\n            <Footer />\n          </>\n        </Router>\n\n      \n\n      </div>\n\n\n\n    );\n  }\n}\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}